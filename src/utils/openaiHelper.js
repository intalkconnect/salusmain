// src/utils/openaiHelper.js
const { OpenAI } = require("openai");
const fs = require("fs");
const path = require("path");
const { log, error } = require("./logger");

const systemPrompt = `
Voc√™ receber√° o texto completo de uma receita magistral. Extraia com exatid√£o:

- Nome do paciente
- Nome da m√©dica ou m√©dico. Remova t√≠tulos como "doutor", "doutora", "dr.", "dra." do resultado final.

‚ö†Ô∏è Para identificar o nome da m√©dica(o), considere todas as possibilidades abaixo:
‚Ä¢ Normalmente aparece no topo (header), no final (rodap√©) ou como carimbo.
‚Ä¢ Pode vir como t√≠tulo destacado, linha em negrito ou com informa√ß√µes como e-mail, CRM, CRN, CRO, COREN, CREFITO etc.
‚Ä¢ Pode estar ao lado de palavras como: Nutricionista, M√©dico(a), Fisioterapeuta, Farmac√™utico(a), Psic√≥logo(a), etc.
‚Ä¢ Assinaturas, carimbos ou linhas soltas no final da receita tamb√©m podem indicar o nome.
‚Ä¢ Exemplo de padr√µes esperados:
  - "Dra. Juliana A. Lima ‚Äì CRN 5678" ‚Üí "Juliana A. Lima"
  - "Dr. Pedro Silva CRM/SP 123456" ‚Üí "Pedro Silva"
  - "Nutricionista: Carla Mendes ‚Äì CRN 9123" ‚Üí "Carla Mendes"

- Lista de medicamentos finais (ex: "formula_0", "formula_1", etc.)

Cada medicamento pode conter uma ou mais mat√©rias-primas. N√ÉO separe por ativo se estiverem na mesma f√≥rmula com mesma posologia e forma.

Para cada medicamento:

‚Ä¢ raw_materials: lista de subst√¢ncias com os campos:
  - active: nome da subst√¢ncia
  - dose: apenas o n√∫mero (ex: 5, 200.0)
  - unity: unidade (mg, %, UI, mcg etc.)

‚Ä¢ form: forma farmac√™utica (ex: c√°psula, sach√™, pump)
‚Ä¢ type: tipo da forma (ex: vegetal), se houver
‚Ä¢ posology: modo de uso conforme descrito no texto
‚Ä¢ quantity: n√∫mero total de unidades a serem manipuladas

IMPORTANTE:
- Se a quantidade N√ÉO estiver expl√≠cita, calcule com base na posologia e dura√ß√£o:
  ‚Ä¢ Interprete varia√ß√µes como:
    - "por 2 meses", "durante 2 meses" = 60 dias
    - "uso cont√≠nuo" = 30 dias
    - "por 8 semanas" = 56 dias
    - "por 1 m√™s", "durante 1 m√™s" = 30 dias
  ‚Ä¢ Frequ√™ncia:
    - "1x ao dia", "uma vez ao dia", "1 c√°psula ao dia", "tomar diariamente" = 1 unidade por dia
    - "2x ao dia", "a cada 12h" = 2 unidades por dia
    - "3x ao dia", "a cada 8h" = 3 unidades por dia
  ‚Ä¢ Exemplo:
    - "Tomar 1 c√°psula 2x ao dia por 30 dias" = 60 unidades
    - "Tomar 1 c√°psula ao dia por 2 meses" = 60 unidades
    - "Tomar 1 dose ao dia, uso cont√≠nuo" = 30 unidades

Se o nome da f√≥rmula n√£o estiver claro, use "formula_0", "formula_1", etc., de forma incremental.

Nunca inclua valores diferentes de n√∫mero em "dose". Use apenas n√∫meros como 5, 10.0 etc.
Retorne APENAS um JSON neste formato:

{
  "patient": "Nome do paciente ou null",
  "doctor": "Nome da m√©dica(o) ou null",
  "medications": {
    "formula_0": {
      "raw_materials": [
        { "active": "Naltrexona", "dose": 5, "unity": "mg" },
        { "active": "Topiramato", "dose": 10, "unity": "mg" }
      ],
      "form": "C√°psula",
      "type": "",
      "posology": "Tomar 1 c√°psula 2x ao dia por 30 dias",
      "quantity": 60
    }
  }
}

Use null quando n√£o houver valor. Nenhum texto fora do JSON.
`.trim();

async function callOpenAIWithVision(filepath, key, jobId) {
  try {
    const ext = path.extname(filepath).toLowerCase();
    const mime =
      [".jpg", ".jpeg", ".png"].includes(ext) ? "image/jpeg" : "application/octet-stream";
    const buffer = fs.readFileSync(filepath);
    const base64 = buffer.toString("base64");

    const openai = new OpenAI({ apiKey: key });
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      temperature: 0,
      max_tokens: 1500,
      messages: [
        { role: "system", content: systemPrompt },
        {
          role: "user",
          content: [
            { type: "text", text: "Extraia os dados da receita anexa:" },
            {
              type: "image_url",
              image_url: {
                url: `data:${mime};base64,${base64}`,
              },
            },
          ],
        },
      ],
    });

    const content = response.choices[0].message.content;
    const match = content.match(/\{[\s\S]*\}/);
    const json = match ? JSON.parse(match[0]) : null;

    if (!json || (!json.patient && !json.medications)) {
      log(`üë§ Resultado inv√°lido para job ${jobId}`);
      return { status: "human" };
    }

    return json;
  } catch (err) {
    error("Erro Vision:", err);
    return { status: "human" };
  }
}

async function callOpenAIWithText(text, key, jobId) {
  try {
    const openai = new OpenAI({ apiKey: key });
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      temperature: 0,
      max_tokens: 1500,
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: text },
      ],
    });

    const content = response.choices[0].message.content;
    const match = content.match(/\{[\s\S]*\}/);
    const json = match ? JSON.parse(match[0]) : null;

    if (!json || (!json.patient && !json.medications)) {
      log(`üë§ Resultado inv√°lido para job ${jobId}`);
      return { status: "human" };
    }

    return json;
  } catch (err) {
    error("Erro Text GPT:", err);
    return { status: "human" };
  }
}

module.exports = {
  callOpenAIWithVision,
  callOpenAIWithText,
};
